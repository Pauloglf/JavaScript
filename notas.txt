window.alert:
envia um aviso ao usuário 

window.confirm:
envia uma pergunta com as respostas "ok" e "cancel"

window.prompt:
envia uma pergunta com a necessidade de digitar para 
responder

document.write:
escreve a string no documento

variável.innerText:
o texto que está dentro

variável.innerHTML:
o mesmo acima com formatação e as vezes tags

variaveis podem ser usadas com VAR ou LET

tipos primitivos de dados para variaveis
(no JS o tipo pode ser alterado
use typeof para identificar)
number: números
string: caractéres, as vezes inclui números quando incluir algum caractére
boolean: true e false
null
undefined
object
function


regras para identificadores:
podem começar com letras,$ ou _
com números não

é possivel usar letras, números, símbolos e acentos

não deve conter espaços

não devem ser palavras reservadas (comandos do JS)


ao usar identificadores se deve colocá-los fora das aspas e concatenar com + numa string



para converter o tipo de uma variável string para number se usa  
 Number.parseInt(n) para inteiros
 Number.parseFloat(n) para reais
 Number(n) para ambos


para converter number para string se usa
 String(n)
 n.toString()




para facilitar na hora da digitação use template string no lugar das variáveis 
${var} para identificar a variável 
A STRING DEVE ESTAR COBERTA POR CRASES `` DURANTE A TEMPLATE STRING

algumas mudanças com o template string  
var.length diz quantos caracteres existem 
let.toUpperCase() todas maiúsculas
let.toLowerCase() todas minúsculas

mudanças em números
var.toFixed(2) para fixar casas decimais
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}) para converter um número para Real Brasileiro



Tipos de Operadores:
aritméticos:
+ soma
- subtração
* multiplicação
/ divisão real
% divisão inteira mostrando o resto
** potência


atribuição:
simples
var n1 = 3
var n2 = n1 * 5

auto-atribuição;
var n = 3
n = n + 4

simplificando;
n += 4
funciona com qualquer operação

incremento;
n++ seria n + 1
n-- seria n - 1
++n ou --n mostra a resposta de imediato


relacionais:
o resultado sempre será um valor booleano true ou false
> maior que
< menor que 
>= maior ou igual a
<= menor ou igual a
== igual a 
!= diferente de
=== o tipo e valor são iguais
!== o tipo e valor são diferentes


lógicos:
! negação 
&& conjução 'e' 
// disjunção 'ou'
todos usam true e false


ternário:
? 
:
teste ? true :false

ordem dos operadores:
aritmético ((), **,/ *, + -)
relacional (o que aparecer primeiro)
lógico (!, &&, ||)



DOM Document Object Model
window: a janela do navegador em que aparece o JS
esses são seus child
location; a URL da página atual e anterior
document; o documento atual(
html e seus child: 
head
body
)
history; histórico de onde foi e vai



como acessar os elementos acima
por Marca: getElementsByTagName('tag')[o número da tag de cima para baixo a partir do 0]
por ID: getElementsByID
por Nome: getElementsByName
por Classe: getElementsByClassName
por Seletor: querySelector(); querySelectorAll()


é possivel usar DOM para alterar variáveis
ex: p1.style.color = blue



Eventos DOM
podem ser escritos tanto em HTML quanto em JS
em HTML se dispara com on+evento
em JS se usa o .addEventListener()

mouseenter: quando o mouse entra na área
mousemove: quando o mouse se mover
mousedown: ao clicar e segurar
mouseup: ao soltar
click: clique
mouseout: assim que retirar o mouse da área


Funções são linhas de códigos que são executadas após algum evento ocorrer
um conjunto de linhas se chama bloco, ele é marcado pelo function ação(){

}
para funcionar deve ser nomeado com uma ação se não serão anônimos, dentro dos () pode ter parametros]



para correção de erros basta inspecionar com o devtools e ele provavelmente apontará a linha onde está o erro 