Comandos de JS:

window.alert('')
envia um aviso ao usuário 

window.confirm('')
envia uma pergunta com as respostas "ok" e "cancel"

window.prompt('')
envia uma pergunta com a necessidade de digitar para 
responder

document.write('')
escreve a string no documento
Node.js:console.log('')

<script></script>
para utilizar JS dentro do HTML

<script src="script.js"></script>
usar em HTML de modo externo

document.createElement('')
criar elementos HTML

setAttribute('atributo', 'nome')
usado para adicionar atributos como id

innerText
inserir texto

innerHTML
o mesmo acima com formatação e as vezes tags

appendChild()
para inserir elementos

//comentário único
/*
mais de uma linha
*/



Variáveis
variáveis podem ser usadas com VAR ou LET
elas podem conter funções
LET se usado a variável deixará de existir quando fora do bloco 

variáveis simples só são capazes de ter um valor

variáveis compostas(vetor/array) podem ter vários elementos cada elemento terá um valor e um índice/chave

let num = [5, 8, 4] os espaços entre vírgulas dirão a quantidade de valores, contados a partir de 0
para criar novos índicies coloque
ex: num[3] = 6 
o resultado será num[5, 8, 4, 6]
num.push(7) também funciona pois criará uma nova chave

num.length dirá o comprimento do vetor
num.sort() deixará os valores em ordem crescente
num.indexOf(valor) mostra a chave onde se encontra o valor

existe uma repetição for especial para arrays
EX:
for(let pos in num) {
	console.log(num[pos])
}

tipos primitivos de dados para variaveis
(no JS o tipo pode ser alterado
use typeof para identificar)
number: números
string: caractéres, as vezes inclui números quando incluir algum caractére
boolean: true e false
null
undefined
object
function


regras para identificadores:
podem começar com letras,$ ou _
com números não

é possivel usar letras, números, símbolos e acentos

não deve conter espaços

não devem ser palavras reservadas (comandos do JS)


ao usar identificadores se deve colocá-los fora das aspas e concatenar com + numa string


para converter o tipo de uma variável string para number se usa  
 Number.parseInt(n) para inteiros
 Number.parseFloat(n) para reais
 Number(n) para ambos


para converter o tipo para string se usa
 String(n)
 n.toString()


algumas mudanças em variáveis  
var.length diz quantos caracteres existem 
let.toUpperCase() todas maiúsculas
let.toLowerCase() todas minúsculas
var.text o texto da variável
var.uppendChild(let) adiciona um elemento filho

mudanças em números
var.toFixed(2) para fixar casas decimais
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'}) para converter um número para Real Brasileiro




para facilitar na hora da digitação use template string no lugar das variáveis 
${var} para identificar a variável 
A STRING DEVE ESTAR COBERTA POR CRASES `` DURANTE A TEMPLATE STRING
é possível fazer contas dentro de ${}



Tipos de Operadores:
aritméticos:
+ soma
- subtração
* multiplicação
/ divisão real
% divisão inteira mostrando o resto
** potência


atribuição:
simples
var n1 = 3
var n2 = n1 * 5

auto-atribuição;
var n = 3
n = n + 4

simplificando;
n += 4
funciona com qualquer operação
no caso de um string será usado para concatenar

incremento;
n++ seria n + 1
n-- seria n - 1
++n ou --n mostra a resposta de imediato


relacionais:
o resultado sempre será um valor booleano true ou false
> maior que
< menor que 
>= maior ou igual a
<= menor ou igual a
== igual a 
!= diferente de
=== o tipo e valor são iguais
!== o tipo e valor são diferentes


lógicos:
! negação 
&& conjução 'e' 
// disjunção 'ou'
todos usam true e false


ternário:
? 
:
teste ? true :false

ordem dos operadores:
aritmético ((), **,/ *, + -)
relacional (o que aparecer primeiro)
lógico (!, &&, ||)



DOM Document Object Model
window: a janela do navegador em que aparece o JS
esses são seus child
location; a URL da página atual e anterior
document; o documento atual(
html e seus child: 
head
body
)
history; histórico de onde foi e vai



como acessar os elementos acima
por Marca: getElementsByTagName('tag')[o número da tag de cima para baixo a partir do 0]
por ID: getElementsByID
por Nome: getElementsByName
por Classe: getElementsByClassName
por Seletor: querySelector(); querySelectorAll()


é possivel usar DOM para alterar variáveis
ex: p1.style.color = blue



Eventos DOM
podem ser escritos tanto em HTML quanto em JS
em HTML se dispara com on+evento
em JS se usa o .addEventListener()

mouseenter: quando o mouse entra na área
mousemove: quando o mouse se mover
mousedown: ao clicar e segurar
mouseup: ao soltar
click: clique
mouseout: assim que retirar o mouse da área


Funções 
são linhas de códigos que são executadas após algum evento ocorrer ou serem chamadas
um conjunto de linhas se chama bloco, ele é marcado por {} 
function ação(param){

}

para funcionar deve ser nomeado com uma ação se não serão anônimos
dentro dos () é possivel receber parâmetros que funcionam como variáveis
parâmetros serão usados no código do bloco

ação(5) realiza uma chamada e declara um parâmetro

algumas funções podem retornar resultados com o:
return res dentro do bloco que retorna a quem realizou a chamada



para correção de erros basta inspecionar com o devtools e ele provavelmente apontará a linha onde está o erro



Tipos de Condição em JS
condição simples:
if(condição){

}

condição composta:
if(condição){

}else{

} 

condição aninhada:
condições compostas com outras condições dentro
if(condição){

}else if(condição){
   } else {
} 

condição múltipla:
serve para valores fixos
no lugar de uma condição é uma expressão que dependendo do seu valor texta diferentes blocos
ATENÇÃO: o comando break deve estar no fim de cada caso para que o código proxiga normalmente
swith (expressão){
 case valor 1:

 case valor 2:

 case valor 3:

 default:

}



para o colocar a hora atual no código é necessário o código como o de baixo:
var agora = new Date() 
var hora = agora.getHours()

mude o get para pegar outras coisas
dia da semana Day
*
0 Domimgo
1 Segunda
2 Terça
3 Quarta
4 Quinta
5 Sexta
6 Sábado
*
ano FullYear
minutos Minutes
mês Month
segundo Seconds



Repetições.
repetição com teste no início.
uma ação que se repete até a condição ser falsa
while(condição) {

}

teste no fim.
executa, e enquanto a condição for verdadeira for verdadeira continuará a executar
do {

}while(condição)

variável de controle.
o inicio é uma var que será usada na repetição
for(inicio ; teste ; incr){

}



Depuração.
use para ver o passo a passo do programa

break points|pontos de parada



Para usar emojis use o código da emojipedia retire o U+ e substitua por \u{resto do código}
SÓ FUNCIONA EM CRASES